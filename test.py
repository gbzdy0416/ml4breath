import numpy as np
import tensorflow as tf
import sys
import os
import joblib
from losses import custom_loss

def start_test(input_path='BreathingModel_2.h5'):
    # Loading Model
    print("Loading Model...")
    if not os.path.exists(input_path):
        print(f"File does not existï¼š{input_path}")
        sys.exit(1)
    try:
        model = tf.keras.models.load_model(input_path, custom_objects={"custom_loss": custom_loss})
        scaler = joblib.load('scaler.save')
        output_scaler = joblib.load('y_scaler.save')
    except Exception as e:
        print(f"Model loading failed: {e}")
        sys.exit(1)

    print("Test of correctness of the model...")
    # Pre-defined denormalizer
    # Additional test, in case invalid value exists
    test_inputs = scaler.transform(np.array([[k, i, j, l] for i in range(101) for j in [1,5] for k in [1, 7] for l in [1,5]]))
    predictions = model.predict(test_inputs)
    min = 10000000000000
    max = 0
    for predict in predictions:
        if predict[0].any() < 0:
            print("There are several invalid predictions generated by the model!")
            sys.exit(1)
        a, b, c, d,e = output_scaler.inverse_transform(predict.reshape(1, -1))[0]
        e = (a+b)*c
        min = e if e < min else min
        max = e if e > max else max
    print(f"min time: {min:.3f} s")
    print(f"max time: {max:.3f} s")
    print("No invalid values are given. Regular test starting...")
    input_data = scaler.transform(np.array([[50,5,2,1]]))
    # Prediction
    prediction = model.predict(input_data)
    # Result
    inhale, exhale, repetition, reduction, satisfaction = output_scaler.inverse_transform(prediction.reshape(1, -1))[0]
    print(f"Inhale: {inhale:.3f} s")
    print(f"Exhale: {exhale:.3f} s")
    print(f"Repetition: {repetition:.0f} times")
    print(f"Reduction: {reduction:.0f}")
    print(f"Satisfaction: {satisfaction:.0f}")


if __name__ == "__main__":
    start_test()